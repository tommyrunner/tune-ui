import{_ as o,C as n,c as l,S as i,H as s,m as d,a as e,o as r,aG as h}from"./chunks/framework.DspTsRPu.js";const E=JSON.parse('{"title":"树形控件","description":"","frontmatter":{},"headers":[],"relativePath":"components/tree.md","filePath":"components/tree.md"}'),c={name:"components/tree.md"};function p(k,t,b,y,m,g){const a=n("demo");return r(),l("div",null,[t[0]||(t[0]=i('<h1 id="树形控件" tabindex="-1">树形控件 <a class="header-anchor" href="#树形控件" aria-label="Permalink to &quot;树形控件&quot;">​</a></h1><p><img src="'+h+'" alt="树形控件"></p><p>树形控件用于展示具有层级结构的数据，支持选择、展开/折叠等交互操作，适用于文件夹、组织架构、分类管理等场景。</p><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h2><p>基础的树形控件用法，展示层级结构的数据。</p>',5)),s(a,{"component-name":"tree",examples:"basic"}),t[1]||(t[1]=d("h2",{id:"可选择的树形控件",tabindex:"-1"},[e("可选择的树形控件 "),d("a",{class:"header-anchor",href:"#可选择的树形控件","aria-label":'Permalink to "可选择的树形控件"'},"​")],-1)),t[2]||(t[2]=d("p",null,[e("设置 "),d("code",null,"checkable"),e(" 属性为 "),d("code",null,"true"),e(" 可以显示复选框，实现节点的选择功能。")],-1)),s(a,{"component-name":"tree",examples:"checkable"}),t[3]||(t[3]=d("h2",{id:"默认展开和选中",tabindex:"-1"},[e("默认展开和选中 "),d("a",{class:"header-anchor",href:"#默认展开和选中","aria-label":'Permalink to "默认展开和选中"'},"​")],-1)),t[4]||(t[4]=d("p",null,[e("通过 "),d("code",null,"expanded"),e(" 和 "),d("code",null,"checked"),e(" 属性可以设置默认展开和选中的节点。")],-1)),s(a,{"component-name":"tree",examples:"default-state"}),t[5]||(t[5]=d("h2",{id:"手风琴模式",tabindex:"-1"},[e("手风琴模式 "),d("a",{class:"header-anchor",href:"#手风琴模式","aria-label":'Permalink to "手风琴模式"'},"​")],-1)),t[6]||(t[6]=d("p",null,[e("设置 "),d("code",null,"accordion"),e(" 属性为 "),d("code",null,"true"),e(" 可以实现手风琴模式，同级节点只能展开一个。")],-1)),s(a,{"component-name":"tree",examples:"accordion"}),t[7]||(t[7]=d("h2",{id:"禁用状态",tabindex:"-1"},[e("禁用状态 "),d("a",{class:"header-anchor",href:"#禁用状态","aria-label":'Permalink to "禁用状态"'},"​")],-1)),t[8]||(t[8]=d("p",null,[e("设置 "),d("code",null,"disabled"),e(" 属性可以禁用整棵树，也可以通过在数据中设置 "),d("code",null,"disabled"),e(" 字段来禁用特定节点。")],-1)),s(a,{"component-name":"tree",examples:"disabled"}),t[9]||(t[9]=d("h2",{id:"自定义节点内容",tabindex:"-1"},[e("自定义节点内容 "),d("a",{class:"header-anchor",href:"#自定义节点内容","aria-label":'Permalink to "自定义节点内容"'},"​")],-1)),t[10]||(t[10]=d("p",null,"通过默认插槽可以自定义节点的内容和样式。",-1)),s(a,{"component-name":"tree",examples:"custom-node"}),t[11]||(t[11]=d("h2",{id:"控制节点展开方式",tabindex:"-1"},[e("控制节点展开方式 "),d("a",{class:"header-anchor",href:"#控制节点展开方式","aria-label":'Permalink to "控制节点展开方式"'},"​")],-1)),t[12]||(t[12]=d("p",null,[e("通过设置 "),d("code",null,"expand-on-click-node"),e(" 属性可以控制是否在点击节点时展开/折叠节点。")],-1)),s(a,{"component-name":"tree",examples:"expand-control"}),t[13]||(t[13]=i(`<h2 id="树形控件-api" tabindex="-1">树形控件 API <a class="header-anchor" href="#树形控件-api" aria-label="Permalink to &quot;树形控件 API&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table><thead><tr><th>属性名</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td><code>data</code></td><td>显示的数据</td><td><code>array</code></td><td>—</td><td><code>[]</code></td></tr><tr><td><code>node-key</code></td><td>每个树节点用来作为唯一标识的属性</td><td><code>string</code></td><td>—</td><td><code>id</code></td></tr><tr><td><code>label</code></td><td>指定节点标签为节点对象的某个属性值</td><td><code>string</code></td><td>—</td><td><code>label</code></td></tr><tr><td><code>children</code></td><td>指定子树为节点对象的某个属性值</td><td><code>string</code></td><td>—</td><td><code>children</code></td></tr><tr><td><code>expanded</code></td><td>默认展开的节点的 key 的数组</td><td><code>array</code></td><td>—</td><td><code>[]</code></td></tr><tr><td><code>checked</code></td><td>默认勾选的节点的 key 的数组</td><td><code>array</code></td><td>—</td><td><code>[]</code></td></tr><tr><td><code>indent</code></td><td>相邻级节点间的水平缩进，单位为像素</td><td><code>number</code></td><td>—</td><td><code>16</code></td></tr><tr><td><code>checkable</code></td><td>节点是否可被勾选</td><td><code>boolean</code></td><td>—</td><td><code>false</code></td></tr><tr><td><code>accordion</code></td><td>是否每次只打开一个同级树节点</td><td><code>boolean</code></td><td>—</td><td><code>false</code></td></tr><tr><td><code>expand-on-click-node</code></td><td>是否在点击节点的时候展开或者收缩节点</td><td><code>boolean</code></td><td>—</td><td><code>true</code></td></tr><tr><td><code>disabled</code></td><td>是否禁用整棵树</td><td><code>boolean</code></td><td>—</td><td><code>false</code></td></tr></tbody></table><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><table><thead><tr><th>事件名</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td><code>node-expand</code></td><td>节点被展开时触发</td><td><code>(nodeData, node)</code></td></tr><tr><td><code>node-collapse</code></td><td>节点被收起时触发</td><td><code>(nodeData, node)</code></td></tr><tr><td><code>check-change</code></td><td>节点选中状态发生变化时触发</td><td><code>(checkedKeys: string[])</code></td></tr></tbody></table><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><table><thead><tr><th>方法名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td><code>expandByKey</code></td><td>通过 key 展开指定的节点</td><td><code>(key: string, deep: boolean = true)</code></td></tr><tr><td><code>collapseByKey</code></td><td>通过 key 收起指定的节点</td><td><code>(key: string, deep: boolean = true)</code></td></tr><tr><td><code>getCheckedNodes</code></td><td>获取当前选中的节点数据</td><td>—</td></tr></tbody></table><h3 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h3><table><thead><tr><th>插槽名</th><th>说明</th><th>作用域参数</th></tr></thead><tbody><tr><td><code>default</code></td><td>自定义树节点的内容</td><td><code>{ node: TreeNodeType, data: object }</code></td></tr><tr><td><code>empty</code></td><td>自定义树为空时的内容</td><td>—</td></tr></tbody></table><h3 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h3><p>每个节点对象应包含以下字段：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NodeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唯一标识，默认为id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 节点显示的文本，默认为label</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NodeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子节点，默认为children</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否禁用节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="样式变量" tabindex="-1">样式变量 <a class="header-anchor" href="#样式变量" aria-label="Permalink to &quot;样式变量&quot;">​</a></h3><p>树形控件使用了以下样式变量，可通过 SCSS 变量进行自定义：</p><table><thead><tr><th>变量名</th><th>说明</th></tr></thead><tbody><tr><td>$font-size-default</td><td>默认字体大小</td></tr><tr><td>$text-color-default</td><td>默认文本颜色</td></tr><tr><td>$border-color-default</td><td>默认边框颜色</td></tr><tr><td>$bg-color-default</td><td>默认背景颜色</td></tr><tr><td>$bg-color-hover</td><td>悬停背景颜色</td></tr><tr><td>$theme-color-primary</td><td>主题色-主要</td></tr></tbody></table>`,15))])}const f=o(c,[["render",p]]);export{E as __pageData,f as default};
