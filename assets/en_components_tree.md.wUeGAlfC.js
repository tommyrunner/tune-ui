import{_ as g,h as b,C as k,o as h,c as p,H as r,m as e,F as E,D as C,t as f,a as o,w as L,n as N,P as F,e as A,d as S,S as x,aJ as D}from"./chunks/framework.Nq6kOwAg.js";const $={class:"tree-demo"},P={__name:"basic",setup(m){const i=b([{id:"1",label:"Level 1 Node 1",children:[{id:"1-1",label:"Level 2 Node 1-1",children:[{id:"1-1-1",label:"Level 3 Node 1-1-1"},{id:"1-1-2",label:"Level 3 Node 1-1-2"}]},{id:"1-2",label:"Level 2 Node 1-2"}]},{id:"2",label:"Level 1 Node 2",children:[{id:"2-1",label:"Level 2 Node 2-1"},{id:"2-2",label:"Level 2 Node 2-2"}]},{id:"3",label:"Level 1 Node 3"}]);return(t,l)=>{const s=k("t-tree");return h(),p("div",$,[r(s,{data:i.value},null,8,["data"])])}}},T=g(P,[["__scopeId","data-v-50677bd5"]]),q={class:"tree-demo"},B={class:"result-container"},j={key:0,class:"result-list"},W={key:1,class:"result-empty"},I={__name:"checkable",setup(m){const i=b([{id:"1",label:"Level 1 Node 1",children:[{id:"1-1",label:"Level 2 Node 1-1",children:[{id:"1-1-1",label:"Level 3 Node 1-1-1"},{id:"1-1-2",label:"Level 3 Node 1-1-2"}]},{id:"1-2",label:"Level 2 Node 1-2"}]},{id:"2",label:"Level 1 Node 2",children:[{id:"2-1",label:"Level 2 Node 2-1"},{id:"2-2",label:"Level 2 Node 2-2"}]}]),t=b([]),l=s=>{t.value=s.map(d=>{const u=(n,a)=>{for(const c of n){if(c.id===a)return c.label;if(c.children){const v=u(c.children,a);if(v)return v}}return null};return u(i.value,d)}).filter(Boolean)};return(s,d)=>{const u=k("t-tree");return h(),p("div",q,[r(u,{data:i.value,checkable:"",onCheckChange:l},null,8,["data"]),e("div",B,[d[0]||(d[0]=e("div",{class:"result-title"},"Currently Selected Nodes:",-1)),t.value.length?(h(),p("div",j,[(h(!0),p(E,null,C(t.value,(n,a)=>(h(),p("div",{key:a,class:"result-item"},f(n),1))),128))])):(h(),p("div",W,"No nodes selected"))])])}}},M=g(I,[["__scopeId","data-v-7bde02ba"]]),V={class:"tree-demo"},z={__name:"default-state",setup(m){const i=b([{id:"1",label:"Level 1 Node 1",children:[{id:"1-1",label:"Level 2 Node 1-1",children:[{id:"1-1-1",label:"Level 3 Node 1-1-1"},{id:"1-1-2",label:"Level 3 Node 1-1-2"}]},{id:"1-2",label:"Level 2 Node 1-2"}]},{id:"2",label:"Level 1 Node 2",children:[{id:"2-1",label:"Level 2 Node 2-1"},{id:"2-2",label:"Level 2 Node 2-2"}]}]),t=b(["1","1-1"]),l=b(["1-1-2","2-1"]);return(s,d)=>{const u=k("t-tree");return h(),p("div",V,[r(u,{data:i.value,checkable:"",expanded:t.value,checked:l.value},null,8,["data","expanded","checked"]),d[0]||(d[0]=e("div",{class:"description"},[o(" Default expanded nodes: Level 1 Node 1, Level 2 Node 1-1"),e("br"),o(" Default selected nodes: Level 3 Node 1-1-2, Level 2 Node 2-1 ")],-1))])}}},J=g(z,[["__scopeId","data-v-11491cb3"]]),H={class:"tree-demo"},O={class:"demo-row"},K={class:"demo-row"},U={__name:"accordion",setup(m){const i=b([{id:"1",label:"Level 1 Node 1",children:[{id:"1-1",label:"Level 2 Node 1-1"},{id:"1-2",label:"Level 2 Node 1-2"},{id:"1-3",label:"Level 2 Node 1-3"}]},{id:"2",label:"Level 1 Node 2",children:[{id:"2-1",label:"Level 2 Node 2-1"},{id:"2-2",label:"Level 2 Node 2-2"}]},{id:"3",label:"Level 1 Node 3",children:[{id:"3-1",label:"Level 2 Node 3-1"},{id:"3-2",label:"Level 2 Node 3-2"}]}]);return(t,l)=>{const s=k("t-tree");return h(),p("div",H,[e("div",O,[l[0]||(l[0]=e("div",{class:"label"},"Normal Mode:",-1)),r(s,{data:i.value},null,8,["data"])]),e("div",K,[l[1]||(l[1]=e("div",{class:"label"},"Accordion Mode:",-1)),r(s,{data:i.value,accordion:""},null,8,["data"])])])}}},Y=g(U,[["__scopeId","data-v-ef2d2378"]]),G={class:"tree-demo"},R={class:"demo-row"},Q={class:"demo-row"},X={__name:"disabled",setup(m){const i=b([{id:"1",label:"Level 1 Node 1",children:[{id:"1-1",label:"Level 2 Node 1-1",disabled:!0,children:[{id:"1-1-1",label:"Level 3 Node 1-1-1"}]},{id:"1-2",label:"Level 2 Node 1-2"}]},{id:"2",label:"Level 1 Node 2",children:[{id:"2-1",label:"Level 2 Node 2-1",disabled:!0},{id:"2-2",label:"Level 2 Node 2-2"}]}]),t=b([{id:"1",label:"Level 1 Node 1",children:[{id:"1-1",label:"Level 2 Node 1-1",children:[{id:"1-1-1",label:"Level 3 Node 1-1-1"}]},{id:"1-2",label:"Level 2 Node 1-2"}]},{id:"2",label:"Level 1 Node 2",children:[{id:"2-1",label:"Level 2 Node 2-1"},{id:"2-2",label:"Level 2 Node 2-2"}]}]);return(l,s)=>{const d=k("t-tree");return h(),p("div",G,[e("div",R,[s[0]||(s[0]=e("div",{class:"label"},"Individual Node Disabled:",-1)),r(d,{data:i.value,checkable:""},null,8,["data"])]),e("div",Q,[s[1]||(s[1]=e("div",{class:"label"},"Entire Tree Disabled:",-1)),r(d,{data:t.value,checkable:"",disabled:""},null,8,["data"])])])}}},Z=g(X,[["__scopeId","data-v-c7fb27e8"]]),w={class:"tree-demo"},ee={class:"custom-node"},te={class:"node-label"},de={__name:"custom-node",setup(m){const i=b([{id:"1",label:"Project Files",tag:"Folder",children:[{id:"1-1",label:"Source Code",tag:"Folder",children:[{id:"1-1-1",label:"index.html",tag:"HTML"},{id:"1-1-2",label:"app.js",tag:"JS"},{id:"1-1-3",label:"style.css",tag:"CSS"}]},{id:"1-2",label:"Assets",tag:"Folder",children:[{id:"1-2-1",label:"logo.png",tag:"Image"},{id:"1-2-2",label:"banner.jpg",tag:"Image"}]},{id:"1-3",label:"README.md",tag:"MD"}]},{id:"2",label:"Config Files",tag:"Folder",children:[{id:"2-1",label:"package.json",tag:"JSON"},{id:"2-2",label:".gitignore",tag:"Config"}]}]),t=d=>{var a,c;if(((a=d==null?void 0:d.data)==null?void 0:a.children)&&d.data.children.length>0)return d.isExpanded?"icon icon-folder-open":"icon icon-folder";const n=((c=d==null?void 0:d.data)==null?void 0:c.label)||"";return n.endsWith(".html")?"icon icon-html":n.endsWith(".js")?"icon icon-js":n.endsWith(".css")?"icon icon-css":n.endsWith(".json")?"icon icon-json":n.endsWith(".md")?"icon icon-markdown":n.endsWith(".png")||n.endsWith(".jpg")?"icon icon-image":"icon icon-file"},l=d=>{var a,c;if(((a=d==null?void 0:d.data)==null?void 0:a.children)&&d.data.children.length>0)return"#f9a825";const n=((c=d==null?void 0:d.data)==null?void 0:c.label)||"";return n.endsWith(".html")?"#e44d26":n.endsWith(".js")?"#f0db4f":n.endsWith(".css")?"#264de4":n.endsWith(".json")?"#f0a050":n.endsWith(".md")?"#2196f3":n.endsWith(".png")||n.endsWith(".jpg")?"#4caf50":"#607d8b"},s=d=>({Folder:"tag-folder",HTML:"tag-html",JS:"tag-js",CSS:"tag-css",JSON:"tag-json",MD:"tag-md",Image:"tag-image",Config:"tag-config"})[d]||"tag-default";return(d,u)=>{const n=k("t-tree");return h(),p("div",w,[r(n,{data:i.value},{default:L(a=>{var c,v,y,_;return[e("div",ee,[e("span",{class:N(t(a==null?void 0:a.node)),style:F({color:l(a==null?void 0:a.node)})},null,6),e("span",te,f((c=a==null?void 0:a.node)==null?void 0:c.label),1),(v=a==null?void 0:a.node)!=null&&v.tag?(h(),p("span",{key:0,class:N(["node-tag",s((y=a==null?void 0:a.node)==null?void 0:y.tag)])},f((_=a==null?void 0:a.node)==null?void 0:_.tag),3)):A("",!0)])]}),_:1},8,["data"])])}}},ae=g(de,[["__scopeId","data-v-4244ce91"]]),le={class:"tree-demo"},oe={class:"demo-row"},ne={class:"demo-row"},se={__name:"expand-control",setup(m){const i=b([{id:"1",label:"Level 1 Node 1",children:[{id:"1-1",label:"Level 2 Node 1-1",children:[{id:"1-1-1",label:"Level 3 Node 1-1-1"},{id:"1-1-2",label:"Level 3 Node 1-1-2"}]},{id:"1-2",label:"Level 2 Node 1-2"}]},{id:"2",label:"Level 1 Node 2",children:[{id:"2-1",label:"Level 2 Node 2-1"},{id:"2-2",label:"Level 2 Node 2-2"}]}]);return(t,l)=>{const s=k("t-tree");return h(),p("div",le,[e("div",oe,[l[0]||(l[0]=e("div",{class:"label"},"Click Node to Expand/Collapse:",-1)),r(s,{data:i.value,"expand-on-click-node":!0},null,8,["data"])]),e("div",ne,[l[1]||(l[1]=e("div",{class:"label"},"Click Arrow Only to Expand/Collapse:",-1)),r(s,{data:i.value,"expand-on-click-node":!1},null,8,["data"])]),l[2]||(l[2]=e("div",{class:"description"},[e("p",null,[o("You can control the expand/collapse behavior by setting the "),e("code",null,"expand-on-click-node"),o(" property:")]),e("ul",null,[e("li",null,[e("code",null,"true"),o(": Expand/collapse when clicking on the node (default behavior)")]),e("li",null,[e("code",null,"false"),o(": Only expand/collapse by clicking the arrow icon")])])],-1))])}}},ie=g(se,[["__scopeId","data-v-8e5b6c5e"]]),he=JSON.parse('{"title":"Tree Component","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/tree.md","filePath":"en/components/tree.md"}'),re={name:"en/components/tree.md"},pe=S({...re,setup(m){return(i,t)=>{const l=k("demo");return h(),p("div",null,[t[0]||(t[0]=x('<h1 id="tree-component" tabindex="-1">Tree Component <a class="header-anchor" href="#tree-component" aria-label="Permalink to &quot;Tree Component&quot;">​</a></h1><p><img src="'+D+'" alt="Tree Component"></p><p>Tree component is used to display hierarchical data, supporting interactive operations such as selection, expand/collapse, suitable for folders, organizational structures, category management and other scenarios.</p><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h2><p>Basic tree component usage, displaying hierarchical data.</p>',5)),r(l,{component:T,name:"tree",examples:"basic"}),t[1]||(t[1]=e("h2",{id:"selectable-tree",tabindex:"-1"},[o("Selectable Tree "),e("a",{class:"header-anchor",href:"#selectable-tree","aria-label":'Permalink to "Selectable Tree"'},"​")],-1)),t[2]||(t[2]=e("p",null,[o("Set the "),e("code",null,"checkable"),o(" attribute to "),e("code",null,"true"),o(" to display checkboxes and enable node selection functionality.")],-1)),r(l,{component:M,name:"tree",examples:"checkable"}),t[3]||(t[3]=e("h2",{id:"default-expanded-and-checked",tabindex:"-1"},[o("Default Expanded and Checked "),e("a",{class:"header-anchor",href:"#default-expanded-and-checked","aria-label":'Permalink to "Default Expanded and Checked"'},"​")],-1)),t[4]||(t[4]=e("p",null,[o("You can set default expanded and checked nodes through the "),e("code",null,"expanded"),o(" and "),e("code",null,"checked"),o(" attributes.")],-1)),r(l,{component:J,name:"tree",examples:"default-state"}),t[5]||(t[5]=e("h2",{id:"accordion-mode",tabindex:"-1"},[o("Accordion Mode "),e("a",{class:"header-anchor",href:"#accordion-mode","aria-label":'Permalink to "Accordion Mode"'},"​")],-1)),t[6]||(t[6]=e("p",null,[o("Set the "),e("code",null,"accordion"),o(" attribute to "),e("code",null,"true"),o(" to enable accordion mode, where only one sibling node can be expanded at a time.")],-1)),r(l,{component:Y,name:"tree",examples:"accordion"}),t[7]||(t[7]=e("h2",{id:"disabled-state",tabindex:"-1"},[o("Disabled State "),e("a",{class:"header-anchor",href:"#disabled-state","aria-label":'Permalink to "Disabled State"'},"​")],-1)),t[8]||(t[8]=e("p",null,[o("Set the "),e("code",null,"disabled"),o(" attribute to disable the entire tree, or set the "),e("code",null,"disabled"),o(" field in the data to disable specific nodes.")],-1)),r(l,{component:Z,name:"tree",examples:"disabled"}),t[9]||(t[9]=e("h2",{id:"custom-node-content",tabindex:"-1"},[o("Custom Node Content "),e("a",{class:"header-anchor",href:"#custom-node-content","aria-label":'Permalink to "Custom Node Content"'},"​")],-1)),t[10]||(t[10]=e("p",null,"You can customize node content and styles through the default slot.",-1)),r(l,{component:ae,name:"tree",examples:"custom-node"}),t[11]||(t[11]=e("h2",{id:"control-node-expansion",tabindex:"-1"},[o("Control Node Expansion "),e("a",{class:"header-anchor",href:"#control-node-expansion","aria-label":'Permalink to "Control Node Expansion"'},"​")],-1)),t[12]||(t[12]=e("p",null,[o("You can control whether to expand/collapse nodes when clicking on them by setting the "),e("code",null,"expand-on-click-node"),o(" attribute.")],-1)),r(l,{component:ie,name:"tree",examples:"expand-control"}),t[13]||(t[13]=x(`<h2 id="tree-api" tabindex="-1">Tree API <a class="header-anchor" href="#tree-api" aria-label="Permalink to &quot;Tree API&quot;">​</a></h2><h3 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td><code>data</code></td><td>Data to be displayed</td><td><code>array</code></td><td>—</td><td><code>[]</code></td></tr><tr><td><code>node-key</code></td><td>Unique identifier attribute for each tree node</td><td><code>string</code></td><td>—</td><td><code>id</code></td></tr><tr><td><code>label</code></td><td>Specify node label as a property value of node object</td><td><code>string</code></td><td>—</td><td><code>label</code></td></tr><tr><td><code>children</code></td><td>Specify subtree as a property value of node object</td><td><code>string</code></td><td>—</td><td><code>children</code></td></tr><tr><td><code>expanded</code></td><td>Array of keys of nodes that are expanded by default</td><td><code>array</code></td><td>—</td><td><code>[]</code></td></tr><tr><td><code>checked</code></td><td>Array of keys of nodes that are checked by default</td><td><code>array</code></td><td>—</td><td><code>[]</code></td></tr><tr><td><code>indent</code></td><td>Horizontal indentation between adjacent level nodes in pixels</td><td><code>number</code></td><td>—</td><td><code>16</code></td></tr><tr><td><code>checkable</code></td><td>Whether nodes can be checked</td><td><code>boolean</code></td><td>—</td><td><code>false</code></td></tr><tr><td><code>accordion</code></td><td>Whether to open only one sibling tree node at a time</td><td><code>boolean</code></td><td>—</td><td><code>false</code></td></tr><tr><td><code>expand-on-click-node</code></td><td>Whether to expand or collapse node when clicking on it</td><td><code>boolean</code></td><td>—</td><td><code>true</code></td></tr><tr><td><code>disabled</code></td><td>Whether to disable the entire tree</td><td><code>boolean</code></td><td>—</td><td><code>false</code></td></tr></tbody></table><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><table><thead><tr><th>Event Name</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td><code>node-expand</code></td><td>Triggered when node is expanded</td><td><code>(nodeData, node)</code></td></tr><tr><td><code>node-collapse</code></td><td>Triggered when node is collapsed</td><td><code>(nodeData, node)</code></td></tr><tr><td><code>check-change</code></td><td>Triggered when node check state changes</td><td><code>(checkedKeys: string[])</code></td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><table><thead><tr><th>Method Name</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td><code>getCheckedKeys</code></td><td>Get currently checked node keys</td><td>—</td></tr><tr><td><code>getCheckedNodes</code></td><td>Get currently checked node data</td><td>—</td></tr><tr><td><code>setCheckedKeys</code></td><td>Set checked node keys</td><td><code>(keys: string[])</code></td></tr><tr><td><code>expandAll</code></td><td>Expand all nodes</td><td>—</td></tr><tr><td><code>collapseAll</code></td><td>Collapse all nodes</td><td>—</td></tr></tbody></table><h3 id="slots" tabindex="-1">Slots <a class="header-anchor" href="#slots" aria-label="Permalink to &quot;Slots&quot;">​</a></h3><table><thead><tr><th>Slot Name</th><th>Description</th><th>Scope Parameters</th></tr></thead><tbody><tr><td><code>default</code></td><td>Custom tree node content</td><td><code>{ node: TreeNodeType, data: object }</code></td></tr><tr><td><code>empty</code></td><td>Custom content when tree is empty</td><td>—</td></tr></tbody></table><h3 id="data-structure" tabindex="-1">Data Structure <a class="header-anchor" href="#data-structure" aria-label="Permalink to &quot;Data Structure&quot;">​</a></h3><p>Each node object should contain the following fields:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NodeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodeKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unique identifier, default is id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Text displayed by node, default is label</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NodeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Child nodes, default is children</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Whether to disable node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="style-variables" tabindex="-1">Style Variables <a class="header-anchor" href="#style-variables" aria-label="Permalink to &quot;Style Variables&quot;">​</a></h3><p>The tree component uses the following style variables, which can be customized through SCSS variables:</p><table><thead><tr><th>Variable Name</th><th>Description</th></tr></thead><tbody><tr><td>$font-size-default</td><td>Default font size</td></tr><tr><td>$text-color-default</td><td>Default text color</td></tr><tr><td>$border-color-default</td><td>Default border color</td></tr><tr><td>$bg-color-default</td><td>Default background color</td></tr><tr><td>$bg-color-hover</td><td>Hover background color</td></tr><tr><td>$theme-color-primary</td><td>Theme color - Primary</td></tr></tbody></table>`,15))])}}});export{he as __pageData,pe as default};
