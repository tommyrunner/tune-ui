import{_ as i,c as a,S as t,o as n}from"./chunks/framework.lVPv1HRc.js";const c=JSON.parse('{"title":"全局配置选项","description":"","frontmatter":{},"headers":[],"relativePath":"guide/options/index.md","filePath":"guide/options/index.md"}'),e={name:"guide/options/index.md"};function l(p,s,h,d,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="全局配置选项" tabindex="-1">全局配置选项 <a class="header-anchor" href="#全局配置选项" aria-label="Permalink to &quot;全局配置选项&quot;">​</a></h1><p><code>useOptions</code> 是 Tune UI 提供的全局配置钩子函数，用于管理组件库的主题、尺寸、国际化等全局设置。</p><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useOptions } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tune-ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取配置API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">updateThemeColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">updateDefaultSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">configOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="api-详解" tabindex="-1">API 详解 <a class="header-anchor" href="#api-详解" aria-label="Permalink to &quot;API 详解&quot;">​</a></h2><h3 id="输出参数" tabindex="-1">输出参数 <a class="header-anchor" href="#输出参数" aria-label="Permalink to &quot;输出参数&quot;">​</a></h3><p><code>useOptions</code> 钩子不需要任何输入参数，但会返回以下方法和属性：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>updateThemeColor</td><td><code>(theme: OptionsThemeType) =&gt; void</code></td><td>更新主题色</td></tr><tr><td>updateDefaultSize</td><td><code>(size: ElSizeType) =&gt; void</code></td><td>更新默认元素尺寸</td></tr><tr><td>updateLoadingOptions</td><td><code>(options: LoadingOptionsType) =&gt; void</code></td><td>更新加载配置</td></tr><tr><td>setLocale</td><td><code>(locale: LocaleType) =&gt; void</code></td><td>切换语言</td></tr><tr><td>initOptions</td><td><code>() =&gt; OptionsType</code></td><td>初始化并返回默认配置</td></tr><tr><td>configOptions</td><td><code>Ref&lt;OptionsType&gt;</code></td><td>当前配置的响应式引用</td></tr><tr><td>baseSize</td><td><code>ComputedRef&lt;ElSizeType&gt;</code></td><td>当前基础尺寸计算属性</td></tr><tr><td>locale</td><td><code>ComputedRef&lt;LocaleType&gt;</code></td><td>当前语言计算属性</td></tr></tbody></table><h4 id="获取当前配置" tabindex="-1">获取当前配置 <a class="header-anchor" href="#获取当前配置" aria-label="Permalink to &quot;获取当前配置&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取配置API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">configOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前主题配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configOptions.value.theme);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前尺寸</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configOptions.value.elSize);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前语言</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configOptions.value.locale);</span></span></code></pre></div><h4 id="重置所有配置" tabindex="-1">重置所有配置 <a class="header-anchor" href="#重置所有配置" aria-label="Permalink to &quot;重置所有配置&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取配置API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重置所有配置到默认值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> defaultOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,12)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
