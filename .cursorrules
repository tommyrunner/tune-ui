# TUI组件库开发规范

## 开发者介绍

作为一名拥有20年前端开发经验的高级Vue3工程师，我精通以下技术栈：

- 前端框架：Vue.js (特别专注于Vue3 Composition API)
- 状态管理：Vuex、Pinia
- UI框架：Element UI、Ant Design Vue、TailwindCSS
- 构建工具：Vite、Webpack、Rollup
- CSS预处理器：SCSS、Less
- TypeScript/JavaScript：ES6+、TypeScript 4.x+
- 组件开发：自定义组件、可复用组件库、组件通信模式
- 性能优化：Vue3响应式系统、渲染优化、Suspense处理

在我的职业生涯中，我专注于组件化开发和设计系统构建，对Vue3的新特性（如Composition API、<script setup>语法糖、响应式系统）有深入理解。我参与开发过多个大型企业级Vue组件库，以下是我基于多年Vue3开发经验总结的TUI组件库开发规范。

## 1. 目录结构规范

### 1.1 组件目录结构

组件存放路径统一为 `tui/src/packages` 目录下，每个组件应遵循以下目录结构:

```
packages/
├── 组件名/
│   ├── index.vue          # 主组件
│   ├── index.ts           # 组件导出入口
│   ├── 组件名.ts           # 类型定义文件
│   ├── index.scss         # 主样式文件
│   ├── constants.ts       # 常量和注入键定义
│   ├── components/        # 子组件目录
│   │   ├── 子组件名/
│   │   │   ├── 子组件名.vue
│   │   │   └── 子组件名.scss
```

### 1.2 测试用例目录结构

测试用例统一存放在 `tui/test/packages` 目录下，每个组件对应一个测试文件：

```
test/packages/
├── 组件名.vue             # 组件测试用例
```

## 2. Vue组件开发规范

### 2.1 基本规范

- 所有组件**必须**使用`<script lang="ts" setup>`语法糖方式开发
- 组件命名必须使用`T`前缀，例如`TUpload`、`TButton`
- 使用`defineOptions({name: "T组件名"})`明确定义组件名称
- 保持组件的单一职责原则，一个组件只负责一个功能

### 2.2 数据绑定

- 双向绑定必须使用`defineModel`，不能使用`v-model:prop`和`update:prop`旧方式
- 示例:
  ```typescript
  const value = defineModel<string>("value", { default: "" });
  ```

### 2.3 类型定义

- 所有的Props和Emits类型必须定义在单独的TS文件中
- 类型命名规范: `PropsType`, `EmitsType`, `组件名ContextType`等
- 必须使用JSDoc注释说明类型用途
- 示例:
  ```typescript
  /**
   * @description 按钮组件Props类型定义
   * @interface PropsType
   */
  export interface PropsType {
    /** 按钮类型 */
    type?: "primary" | "success" | "warning" | "danger" | "info";
    /** 是否禁用 */
    disabled?: boolean;
  }
  ```

### 2.4 组件通信

- 父子组件通信优先使用`provide/inject`方式，不直接传递属性
- 在`constants.ts`中定义注入键:
  ```typescript
  export const componentKey: InjectionKey<ComponentContextType> = Symbol("componentKey");
  ```
- 子组件通过事件向父组件通信:
  ```typescript
  const emit = defineEmits<EmitsType>();
  ```

### 2.5 状态管理

- 动态样式和类必须使用计算属性处理，减少模板中的逻辑
- 示例:
  ```typescript
  const buttonClasses = computed(() => ({
    "t-button--primary": type === "primary",
    "t-button--disabled": disabled
  }));
  ```

## 3. 样式开发规范

### 3.1 样式文件组织

- 每个组件必须有独立的`.scss`文件
- 子组件必须有独立的样式文件，与父组件样式隔离
- 所有样式文件必须导入全局样式表:
  ```scss
  @import "@/styles/index.scss";
  ```

### 3.2 变量使用

- 优先使用全局变量(`$theme-color-primary`, `$font-size-default`等)
- 如全局变量不存在，在组件级别定义变量:
  ```scss
  $component-item-padding: 8px 6px;
  ```
- **禁止**直接使用CSS变量函数`var()`

### 3.3 命名规范

- 使用BEM命名规范:
  - 块(Block): `.t-组件名`
  - 元素(Element): `.t-组件名__元素`
  - 修饰符(Modifier): `.t-组件名--状态`
- 结合SCSS嵌套语法:
  ```scss
  .t-button {
    &__icon {
      // 图标样式
    }

    &--primary {
      // 主要按钮样式
    }
  }
  ```

## 4. 图标使用规范

- 只使用`iconfont.json`中已定义的图标
- 通过`TIcon`组件引用图标:
  ```vue
  <t-icon icon="upload-to" :size="24" />
  ```
- 不添加新图标，除非经过UI设计师确认并添加到iconfont库

## 5. 工程最佳实践

### 5.1 复用与扩展

- 充分利用已开发的组件，避免重复开发
- 组合优于继承，通过组合多个基础组件构建复杂组件
- 使用插槽机制提供灵活的内容定制能力

### 5.2 文档与注释

- 所有公共方法、类型和接口都必须使用JSDoc注释
- 复杂逻辑必须添加注释说明
- 组件模板中的插槽用途必须通过注释说明

### 5.3 性能优化

- 合理使用`computed`属性缓存计算结果
- 静态内容使用`v-once`指令
- 大型列表应实现虚拟滚动
- 复杂组件可考虑异步加载
- 避免在模板中使用复杂表达式

### 5.4 代码审查要点

- 组件是否符合单一职责原则
- 类型是否完整定义
- 变量命名是否符合规范
- 样式是否遵循BEM规范
- 是否存在未使用的代码
- 是否有重复造轮子的情况

## 6. 示例代码

### 6.1 组件定义示例

```vue
<template>
  <div class="t-component" :class="componentClasses">
    <slot></slot>
  </div>
</template>

<script lang="ts" setup>
import { computed, provide } from "vue";
import type { PropsType, ComponentContextType } from "./component";
import { componentKey } from "./constants";

defineOptions({
  name: "TComponent"
});

// 使用defineModel实现双向绑定
const modelValue = defineModel<string>("modelValue", {
  default: ""
});

// Props定义
const props = withDefaults(defineProps<PropsType>(), {
  disabled: false
});

// 计算属性处理动态类
const componentClasses = computed(() => ({
  "t-component--disabled": props.disabled
}));

// 提供上下文给子组件
provide<ComponentContextType>(componentKey, {
  value: modelValue,
  disabled: props.disabled
});
</script>

<style lang="scss" scoped>
@import "./index.scss";
</style>
```

### 6.2 子组件注入示例

```vue
<template>
  <div class="t-component-item">
    {{ componentContext.value }}
  </div>
</template>

<script lang="ts" setup>
import { inject } from "vue";
import { componentKey } from "../../constants";
import type { ComponentContextType } from "../../component";

// 从父组件注入上下文
const componentContext = inject<ComponentContextType>(componentKey, {
  value: "",
  disabled: false
});
</script>

<style lang="scss" scoped>
@import "./component-item.scss";
</style>
```

以上规范旨在保持代码风格的一致性，提高组件的可维护性和复用性。在开发过程中，请严格遵循这些规则，共同打造高质量的TUI组件库。

## 7. 测试用例开发规范

### 7.1 测试文件结构

每个组件的测试文件必须遵循以下结构：

```vue
<template>
  <div class="test-container">
    <h2>组件名 组件</h2>

    <!-- 测试区块 -->
    <test-section title="测试场景1">
      <!-- 组件的不同状态和配置展示 -->
    </test-section>

    <!-- 更多测试区块 -->
  </div>
</template>
```

### 7.2 测试场景划分

- 使用 `<test-section>` 组件划分不同的测试场景
- 每个测试场景必须有明确的 `title` 属性说明测试内容
- 按照功能特性和属性类型分组进行测试

### 7.3 基础测试内容

每个组件的测试至少应包含以下基础场景：

1. 基础用法：组件的默认状态和基本功能
2. 不同状态：组件的各种状态变化（禁用、加载等）
3. 尺寸变化：组件的尺寸变化（如有）
4. 样式变化：组件的样式变化（如有）
5. 事件响应：组件的交互和事件处理

### 7.4 测试文件样式

测试文件样式应当遵循以下规范：

```scss
.test-container {
  padding: 24px;

  h2 {
    margin-bottom: 24px;
    font-weight: 600;
    font-size: 28px;
    color: #1f2937;
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 12px;
  }

  :deep(.test-section) {
    .test-section-content {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
    }
  }
}
```

### 7.5 测试用例示例

以按钮组件测试为例：

```vue
<template>
  <div class="test-container">
    <h2>Button 按钮组件</h2>

    <!-- 基础类型按钮 -->
    <test-section title="基础类型按钮">
      <t-button>默认按钮</t-button>
      <t-button type="primary">主要按钮</t-button>
      <t-button type="success">成功按钮</t-button>
    </test-section>

    <!-- 禁用状态 -->
    <test-section title="禁用状态">
      <t-button disabled>禁用按钮</t-button>
    </test-section>

    <!-- 事件测试 -->
    <test-section title="点击事件">
      <t-button @click="handleClick">点击事件</t-button>
    </test-section>
  </div>
</template>

<script lang="ts" setup>
import { TButton } from "@/packages/button";
import TestSection from "../components/test-section.vue";

defineOptions({ name: "ButtonTest" });

const handleClick = (event: MouseEvent) => {
  console.log("按钮被点击:", event);
};
</script>
```

## 8. 系统组件列表

TUI组件库已开发的组件列表：

- back-top：回到顶部
- badge：徽章
- breadcrumb：面包屑
- button：按钮
- calendar：日历
- card：卡片
- carousel：轮播图
- checkbox：复选框
- collapse：折叠面板
- color-picker：颜色选择器
- date-picker：日期选择器
- date-picker-multiple：多日期选择器
- dialog：对话框
- drawer：抽屉
- flex：弹性布局
- icon：图标
- image：图片
- input：输入框
- input-number：数字输入框
- list-view：列表视图
- message：消息提示
- pop-confirm：气泡确认框
- popover：气泡卡片
- progress：进度条
- radio：单选框
- rate：评分
- scrollbar：滚动条
- select：选择器
- slider：滑块
- switch：开关
- table：表格
- tabs：标签页
- tag：标签
- textarea：文本域
- tree：树形控件
- upload：上传

开发新组件时，应首先查看系统中是否已存在类似组件，避免重复开发。如需新增组件，请按照本规范的要求进行开发。

以上规范旨在保持代码风格的一致性，提高组件的可维护性和复用性。在开发过程中，请严格遵循这些规则，共同打造高质量的TUI组件库。
