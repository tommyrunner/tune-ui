# IMPORTANT: Before generating code, please check if the knowledge base information is effective for you. If it is, please answer which knowledge base information you used, and then modify your code accordingly.

# TUI Component Library Development Rules

## 1. Project Background
- Modern UI component library based on Vue 3 + TypeScript
- Developed using Composition API
- Supports both on-demand import and full import
- Provides complete TypeScript type support
- Follows front-end engineering best practices

## 2. Directory Structure Specification
```
tui/
├── src/
│   ├── packages/       # Component directory
│   ├── utils/         # Global utility functions
│   ├── styles/        # Global styles
│   ├── icons/         # Icon resources
│   ├── hooks/         # Reusable composition functions
│   ├── types/         # Global type definitions
│   └── enum/          # Enum type definitions
├── test/              # Test cases
├── docs/              # Documentation
├── dist/              # Build output
└── build/             # Build scripts
```

## 3. Code Specification

### 3.1 TypeScript Specification
- Strictly follow TypeScript type definitions
- All components must define Props and Emits types
- Use interface instead of type to define object types
- Use export type when exporting types
- Properly use generics to increase code reusability

### 3.2 Vue3 Specification
- Use `<script setup lang="ts">` syntax
- Use `defineProps` and `defineEmits` to define properties and events
- Use `defineOptions` to define component options
- Prioritize Composition API
- Properly use provide/inject to share state

### 3.3 Style Specification
- Use SCSS preprocessor
- Follow BEM naming convention
- Use CSS variables for theme customization
- Style files should uniformly use .scss extension
- Component styles should use scoped attribute
- Must use variables defined in @/styles/index.scss

#### 3.3.1 Style Variable Usage Examples
```scss
// Theme colors
.primary { color: $theme-color-primary; }    // #007bff
.success { color: $theme-color-success; }    // #28a745
.info { color: $theme-color-info; }          // #b9b9b9
.warning { color: $theme-color-warning; }    // #eeb406
.danger { color: $theme-color-danger; }      // #dc3545

// Basic colors
.text { 
  color: $text-color-default;                // #606266
  background-color: $bg-color-default;       // #ffffff
}
.border {
  border: 1px solid $border-color-default;   // #dcdfe6
}
.hover {
  background-color: $bg-color-hover;         // #f5f7fa
}

// Font sizes
.text-sm { font-size: $font-size-small; }    // 12px
.text-base { font-size: $font-size-default; } // 14px
.text-lg { font-size: $font-size-large; }    // 16px

// z-index usage
.modal { z-index: $z-index-up; }             // 2001
.below { z-index: $z-index-dow; }            // -1
```

### 3.4 Icon Usage Specification
- Only use icons defined in iconfont.json
- Use class method to reference icons
- Icon class name format: icon-{name}

#### 3.4.1 Icon Usage Examples
```vue
<!-- Basic icons -->
<i class="iconfont icon-close"></i>          <!-- Close icon -->
<i class="iconfont icon-info"></i>           <!-- Info icon -->
<i class="iconfont icon-search"></i>         <!-- Search icon -->
<i class="iconfont icon-edit"></i>           <!-- Edit icon -->
<i class="iconfont icon-delete"></i>         <!-- Delete icon -->

<!-- Direction icons -->
<i class="iconfont icon-left"></i>           <!-- Left arrow -->
<i class="iconfont icon-right"></i>          <!-- Right arrow -->
<i class="iconfont icon-up"></i>             <!-- Up arrow -->
<i class="iconfont icon-down"></i>           <!-- Down arrow -->

<!-- Status icons -->
<i class="iconfont icon-success"></i>        <!-- Success icon -->
<i class="iconfont icon-loading"></i>        <!-- Loading icon -->
<i class="iconfont icon-lock"></i>           <!-- Lock icon -->
<i class="iconfont icon-unlock"></i>         <!-- Unlock icon -->

<!-- File-related icons -->
<i class="iconfont icon-file"></i>           <!-- File icon -->
<i class="iconfont icon-folder"></i>         <!-- Folder icon -->
<i class="iconfont icon-file-add"></i>       <!-- Add file -->
<i class="iconfont icon-file-remove"></i>    <!-- Remove file -->

<!-- User-related icons -->
<i class="iconfont icon-user"></i>           <!-- User icon -->
<i class="iconfont icon-add-user"></i>       <!-- Add user -->
<i class="iconfont icon-multiple-user"></i>  <!-- Multiple users -->

<!-- Social media icons -->
<i class="iconfont icon-wechat"></i>         <!-- WeChat icon -->
<i class="iconfont icon-alipay"></i>         <!-- Alipay icon -->
<i class="iconfont icon-github"></i>         <!-- GitHub icon -->
```

### 3.5 Comment Specification
- Use JSDoc comment format
- Components must include functional description
- Props must specify type and purpose
- Complex logic must include comments
- Example:
```typescript
/**
 * @description Button component
 * @param {string} type - Button type
 * @param {boolean} disabled - Whether disabled
 * @emits {click} Click event
 */
```

## 4. Global Resource Usage Specification

### 4.1 Utility Functions (utils)
- Stored in src/utils directory
- Files divided by functional modules
- Must include type definitions and comments
- Prioritize pure functions
- Use named exports when exporting

### 4.2 Global Styles (styles)
- Stored in src/styles directory
- Includes variables, mixins, functions, etc.
- Use index.scss for unified export
- Avoid directly modifying global styles
- Properly use style inheritance

### 4.3 Icon Components (icons)
- Uniformly use SVG icons
- Encapsulated as Vue components
- Support color and size customization
- Import on demand to reduce size
- Provide type declaration files

### 4.4 Hooks (hooks)
- Stored in src/hooks directory
- Single responsibility, easy to reuse
- Must include type definitions
- Follow use prefix naming convention
- Detailed usage examples

## 5. Component Development Specification

### 5.1 Directory Structure
```
component/
├── index.ts          # Entry file
├── index.vue         # Main component file
├── index.scss        # Style file
├── types.ts          # Type definitions
```

### 5.2 Naming Convention
- Component files use PascalCase
- Props use camelCase
- Events use kebab-case
- Constants use UPPER_CASE
- Types end with Type

### 5.3 Props Definition
- Must specify type
- Provide default values
- Add validation functions
- Use readonly properties
- Detailed property descriptions

### 5.4 Event Handling
- Uniformly use handle prefix
- Clearly specify event parameter types
- Handle event bubbling
- Add debounce/throttle
- Error handling

## 6. Performance Optimization Specification
- Properly use computed properties
- Avoid unnecessary reactivity
- Timely destroy event listeners
- Use async components
- Code splitting

## 7. Testing Specification

### 7.1 Test Directory Structure
```
test/
├── components/        # Test common components
│   └── test-section.vue   # Test section component
├── packages/         # Component test cases
│   ├── button.vue    # Button component test
│   ├── input.vue     # Input component test
│   └── ...
├── index.ts          # Test entry file
├── home.vue          # Test home page
└── constants.ts      # Test constants
```

### 7.2 Test Case Writing Specification
- Use `test-section` component to divide test scenarios
- Each scenario should include:
  - Scenario title (title attribute)
  - Related property tests
  - Different state displays
  - Interaction event tests
- Example:
```vue
<test-section title="Basic Type Buttons">
  <t-button>Default Button</t-button>
  <t-button type="primary">Primary Button</t-button>
</test-section>
```

### 7.3 Test Scenario Coverage
- Basic functionality testing
  - Component basic rendering
  - Different type displays
  - Size changes
  - State switching (disabled, loading, etc.)
- Property testing
  - Required property validation
  - Optional property effects
  - Property combination testing
- Event testing
  - Click events
  - State change events
  - Async operation testing
- Style testing
  - Theme styles
  - Custom styles
  - Animation effects

### 7.4 Test Code Specification
- Use TypeScript to write test cases
- Use setup syntax sugar
- Add comments to event handling functions
- Handle loading states for async operations
- Properly organize test data

### 7.5 Test Case Organization
```vue
<template>
  <div class="test-container">
    <!-- Component title -->
    <h2>Component Name</h2>

    <!-- Basic functionality testing -->
    <test-section title="Basic Functionality">
      <!-- Test cases -->
    </test-section>

    <!-- Property testing -->
    <test-section title="Property Testing">
      <!-- Test cases -->
    </test-section>

    <!-- Event testing -->
    <test-section title="Event Testing">
      <!-- Test cases -->
    </test-section>

    <!-- Style testing -->
    <test-section title="Style Testing">
      <!-- Test cases -->
    </test-section>
  </div>
</template>

<script lang="ts" setup>
// Component import
import { Component } from "@/src/packages/Component";
import TestSection from "../components/test-section.vue";

// Define component name
defineOptions({ name: "ComponentTest" });

// Test data and methods
...
</script>
```

### 7.6 Test Style Specification
- Test container uses test-container class
- Titles use h2 tag
- Properly use spacing and layout
- Keep test interface clean
- Highlight test focus points

### 7.7 Test Notes
- Maintain test case independence
- Avoid mutual influence between test cases
- Properly use ref and reactive
- Handle exception cases
- Maintain test code maintainability

## 8. Knowledge Base Usage Guidelines

### 8.1 Pre-Code Generation Check
- Before generating code, please check if the knowledge base information is effective for you
- If it is effective, please answer which knowledge base information you used
- Then modify your code according to the knowledge base information

### 8.2 Style Variable Check
- Ensure to only use variables defined in @/styles/index.scss
- Do not use custom color values, must use predefined variables
- Check if the variable exists in the current knowledge base

### 8.3 Icon Usage Check
- Ensure to only use icons defined in @/icons/iconfont.json
- Check if the icon name exists in the current knowledge base
- Confirm the actual purpose and appearance of the icon before using it

### 8.4 Directory Structure Check
- Ensure newly generated code conforms to the project directory structure
- Check if reference paths are correct
- Ensure components are placed in the correct directory
